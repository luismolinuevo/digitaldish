// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// firstName & lastName being optional "?" | userRating with a default of 0.0
model User {
  id         Int         @id @unique @default(autoincrement())
  firstName  String?     @db.VarChar(255)
  lastName   String?     @db.VarChar(255)
  userName   String      @db.VarChar(255)
  email      String      @unique @db.VarChar(255)
  password   String      @db.VarChar(255)
  imageUrl   String?
  userRating Float       @default(0.0) //avg out somewhere(maybe front end). Use toFixed(2) to keep decimal small
  post       Post[]
  follower   Followers[]
  chatrooms  Chatroom[]
}

model Followers {
  id        Int @unique @default(autoincrement())
  follwerId Int

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id          Int    @unique @default(autoincrement())

  userName    String
  title       String
  imageURL    String?       
  description String
  price       Float
  Category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startTime   DateTime? @default(now())
  endTime     DateTime?

  userId  Int
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment[]

  @@index([userId])
}

model Comment {
  id      Int    @unique @default(autoincrement())
  content String

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Chatroom {
  id Int @unique @default(autoincrement())

  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId Int     @unique
  messages  Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([userId, messageId])
  @@index([userId, messageId])
}

model Message {
  id             Int      @id @unique @default(autoincrement())
  senderUserName String
  createAt       DateTime

  chat Chatroom[]
}
