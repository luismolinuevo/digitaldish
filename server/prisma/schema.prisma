// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// firstName & lastName being optional "?" | userRating with a default of 0.0
model User {
  id           Int            @id @unique @default(autoincrement())
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  userName     String         @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  imageUrl     String?
  userRating   Float          @default(0.0) //avg out somewhere(maybe front end). Use toFixed(2) to keep decimal small
  post         Post[]
  follower     Followers[]
  chatrooms    Chatroom[]
  bid          Bid[]
  offer        Offer[]
  offerMessage OfferMessage[]
  prevorder    PrevOrder[]
}

model Followers {
  id         Int  @unique @default(autoincrement())
  followerId Int
  userId     Int
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id           Int      @unique @default(autoincrement())
  userName     String
  title        String
  imageURL     String?
  description  String
  price        String
  category     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  startTime    String?
  endTime      String?
  location     String?
  shippingFees String?
  carrier      String?
  color        String?
  condition    String?
  size         String?
  subcategory  String?

  userId    Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment[]
  bid       Bid[]
  offer     Offer[]
  prevorder PrevOrder[]

  @@index([userId])
}

model Comment {
  id      Int    @unique @default(autoincrement())
  content String
  postId  Int
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Chatroom {
  id Int @id @unique @default(autoincrement())

  // user1Id    Int
  users User[]
  // user1      User    @relation("User1",fields: [user1Id], references: [id], onDelete: Cascade)

  // user2Id    Int
  // user2      User    @relation("User2",fields: [user2Id], references: [id], onDelete: Cascade)

  messages Message[]

  // @@index([user1Id, user2Id])
}

model Message {
  id             Int      @id @unique @default(autoincrement())
  senderUserName String
  createAt       DateTime
  chatId         Int
  chat           Chatroom @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model Offer {
  id Int @id @unique @default(autoincrement())

  // userId Int
  // user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  users        User[]
  currentOffer Decimal?
  status       String?
  buyerAccept  Boolean? @default(false)
  sellerAccept Boolean? @default(false)
  user1Accept  Boolean? @default(false)
  user2Accept  Boolean? @default(false)
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  offermessages OfferMessage[]

  // @@index([userId])
  @@index([postId])
}

model OfferMessage {
  id       Int      @id @unique @default(autoincrement())
  content  String
  createAt DateTime
  offerId  Int
  offer    Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([offerId])
  @@index([userId])
}

model Bid {
  id Int @id @unique @default(autoincrement())

  price Float
  status String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model PrevOrder {
  id Int @id @unique @default(autoincrement())
  finalPrice String? 
  status String?
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}
